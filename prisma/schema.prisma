generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  name              String? 
  email             String      @unique
  image             String?  
  password          String
  role              UserRole
  isVerified        Boolean     @default(false)
  isApproved        Boolean     @default(false)
  institution       Institution? @relation(fields: [institutionId], references: [id])
  institutionId     String?
  corporate         Corporate?  @relation(fields: [corporateId], references: [id])
  corporateId       String?
  accounts          Account[]   
  sessions          Session[]  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Institution {
  id                  String      @id @default(cuid())
  name                String
  type                InstitutionType
  establishedYear     Int
  affiliationNumber   String
  location            String
  email               String
  phone               String
  alternatePhone      String?
  address             String
  zipCode             String
  adminName           String
  adminDesignation    String
  users               User[]
  documents           InstitutionDocument[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model InstitutionDocument {
  id                        String      @id @default(cuid())
  affiliationCertificate    String?
  governmentRecognition     String?
  letterhead                String?
  institution               Institution @relation(fields: [institutionId], references: [id])
  institutionId             String
}

model Corporate {
  id                  String      @id @default(cuid())
  name                String
  industry            String
  companyType         CompanyType
  companySize         CompanySize
  establishedYear     Int
  registrationNumber  String
  gstNumber           String
  description         String?
  email               String
  phone               String
  website             String
  address             Json
  hrContact           Json
  users               User[]
  documents           CorporateDocument[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model CorporateDocument {
  id                      String      @id @default(cuid())
  registrationCertificate String?
  taxDocument             String?
  companyProfile          String?
  corporate               Corporate   @relation(fields: [corporateId], references: [id])
  corporateId             String
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  type      String   
  createdAt DateTime @default(now())
  expiresAt DateTime
}




enum UserRole {
  ADMIN
  INSTITUTION
  CORPORATE
}

enum InstitutionType {
  university
  college
  technical
  research
}

enum CompanyType {
  public
  private
  partnership
  startup
  government
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}